/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProtectedRouteImport } from './routes/_protected'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthIndexRouteImport } from './routes/auth/index'
import { Route as DemoTanstackQueryRouteImport } from './routes/demo.tanstack-query'
import { Route as ProtectedDashboardRouteImport } from './routes/_protected/dashboard'
import { Route as ProtectedStaffIndexRouteImport } from './routes/_protected/staff/index'
import { Route as ProtectedRetailerIndexRouteImport } from './routes/_protected/retailer/index'
import { Route as ProtectedProductIndexRouteImport } from './routes/_protected/product/index'
import { Route as ProtectedCategoryIndexRouteImport } from './routes/_protected/category/index'
import { Route as ProtectedBrandIndexRouteImport } from './routes/_protected/brand/index'
import { Route as ProtectedProductAddRouteImport } from './routes/_protected/product/add'

const ProtectedRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthIndexRoute = AuthIndexRouteImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoTanstackQueryRoute = DemoTanstackQueryRouteImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedDashboardRoute = ProtectedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedStaffIndexRoute = ProtectedStaffIndexRouteImport.update({
  id: '/staff/',
  path: '/staff/',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedRetailerIndexRoute = ProtectedRetailerIndexRouteImport.update({
  id: '/retailer/',
  path: '/retailer/',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedProductIndexRoute = ProtectedProductIndexRouteImport.update({
  id: '/product/',
  path: '/product/',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedCategoryIndexRoute = ProtectedCategoryIndexRouteImport.update({
  id: '/category/',
  path: '/category/',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedBrandIndexRoute = ProtectedBrandIndexRouteImport.update({
  id: '/brand/',
  path: '/brand/',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedProductAddRoute = ProtectedProductAddRouteImport.update({
  id: '/product/add',
  path: '/product/add',
  getParentRoute: () => ProtectedRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof ProtectedDashboardRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/auth': typeof AuthIndexRoute
  '/product/add': typeof ProtectedProductAddRoute
  '/brand': typeof ProtectedBrandIndexRoute
  '/category': typeof ProtectedCategoryIndexRoute
  '/product': typeof ProtectedProductIndexRoute
  '/retailer': typeof ProtectedRetailerIndexRoute
  '/staff': typeof ProtectedStaffIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof ProtectedDashboardRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/auth': typeof AuthIndexRoute
  '/product/add': typeof ProtectedProductAddRoute
  '/brand': typeof ProtectedBrandIndexRoute
  '/category': typeof ProtectedCategoryIndexRoute
  '/product': typeof ProtectedProductIndexRoute
  '/retailer': typeof ProtectedRetailerIndexRoute
  '/staff': typeof ProtectedStaffIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/_protected/dashboard': typeof ProtectedDashboardRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/auth/': typeof AuthIndexRoute
  '/_protected/product/add': typeof ProtectedProductAddRoute
  '/_protected/brand/': typeof ProtectedBrandIndexRoute
  '/_protected/category/': typeof ProtectedCategoryIndexRoute
  '/_protected/product/': typeof ProtectedProductIndexRoute
  '/_protected/retailer/': typeof ProtectedRetailerIndexRoute
  '/_protected/staff/': typeof ProtectedStaffIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/demo/tanstack-query'
    | '/auth'
    | '/product/add'
    | '/brand'
    | '/category'
    | '/product'
    | '/retailer'
    | '/staff'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/demo/tanstack-query'
    | '/auth'
    | '/product/add'
    | '/brand'
    | '/category'
    | '/product'
    | '/retailer'
    | '/staff'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/_protected/dashboard'
    | '/demo/tanstack-query'
    | '/auth/'
    | '/_protected/product/add'
    | '/_protected/brand/'
    | '/_protected/category/'
    | '/_protected/product/'
    | '/_protected/retailer/'
    | '/_protected/staff/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedRoute: typeof ProtectedRouteWithChildren
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
  AuthIndexRoute: typeof AuthIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/dashboard': {
      id: '/_protected/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof ProtectedDashboardRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/staff/': {
      id: '/_protected/staff/'
      path: '/staff'
      fullPath: '/staff'
      preLoaderRoute: typeof ProtectedStaffIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/retailer/': {
      id: '/_protected/retailer/'
      path: '/retailer'
      fullPath: '/retailer'
      preLoaderRoute: typeof ProtectedRetailerIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/product/': {
      id: '/_protected/product/'
      path: '/product'
      fullPath: '/product'
      preLoaderRoute: typeof ProtectedProductIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/category/': {
      id: '/_protected/category/'
      path: '/category'
      fullPath: '/category'
      preLoaderRoute: typeof ProtectedCategoryIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/brand/': {
      id: '/_protected/brand/'
      path: '/brand'
      fullPath: '/brand'
      preLoaderRoute: typeof ProtectedBrandIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/product/add': {
      id: '/_protected/product/add'
      path: '/product/add'
      fullPath: '/product/add'
      preLoaderRoute: typeof ProtectedProductAddRouteImport
      parentRoute: typeof ProtectedRoute
    }
  }
}

interface ProtectedRouteChildren {
  ProtectedDashboardRoute: typeof ProtectedDashboardRoute
  ProtectedProductAddRoute: typeof ProtectedProductAddRoute
  ProtectedBrandIndexRoute: typeof ProtectedBrandIndexRoute
  ProtectedCategoryIndexRoute: typeof ProtectedCategoryIndexRoute
  ProtectedProductIndexRoute: typeof ProtectedProductIndexRoute
  ProtectedRetailerIndexRoute: typeof ProtectedRetailerIndexRoute
  ProtectedStaffIndexRoute: typeof ProtectedStaffIndexRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedDashboardRoute: ProtectedDashboardRoute,
  ProtectedProductAddRoute: ProtectedProductAddRoute,
  ProtectedBrandIndexRoute: ProtectedBrandIndexRoute,
  ProtectedCategoryIndexRoute: ProtectedCategoryIndexRoute,
  ProtectedProductIndexRoute: ProtectedProductIndexRoute,
  ProtectedRetailerIndexRoute: ProtectedRetailerIndexRoute,
  ProtectedStaffIndexRoute: ProtectedStaffIndexRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRoute: ProtectedRouteWithChildren,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
  AuthIndexRoute: AuthIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
